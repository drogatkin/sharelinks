# a rustbee script to build a webbee based app 
# it requires RustBee v 1.12.05 or better

project =sharelinks
 domain =com
org=walletwizz

# cusum CP libs
buzzbee=../Buzzbee/build/buzzbee.jar

"build_directory" = ./build
source_directory ="src/java"
doc_directory=doc
build_file ="${project}.jar"
war_file ="${project}.war"
resources ="${domain}.${project}.resources"
manifest file =""
main_class= "${domain}.${org}.${project}.Main"
TJWS_HOME=../TJWS2

include(../rust_util/src/script/common-java.7b)


aldan3_home="/home/dmitriy/projects/aldan3"
aldan3=${aldan3_home}${~separator~}build${~separator~}aldan3.jar
aldan3-jdo=${aldan3_home}-jdo${~separator~}build${~separator~}aldan3-jdo.jar
webbee_home=/home/dmitriy/projects/Webbee
webbee="${webbee_home}/build/out/webbee.jar"

JDBC_DRIVER="com.h2database:h2:2.3.232":rep-maven
JSON_API_LIB="org.glassfish:javax.json:1.1.4":rep-maven

websocket_api="javax.websocket:javax.websocket-api:1.1":rep-maven
servlet_api="javax.servlet:javax.servlet-api:4.0.1":rep-maven

cp=.temp_repo${~/~}${JSON_API_LIB_JAR}${~path_separator~}.temp_repo${~/~}${servlet jar}${~path_separator~}.temp_repo${~/~}${websocket jar}${~path_separator~}${aldan3}${~path_separator~}${aldan3-jdo}${~path_separator~}${webbee}${~path_separator~}${buzzbee}${~path_separator~}${build_directory}

# Main block execution
as_jar(JSON_API_LIB)
assign(JSON_API_LIB_JAR,~~)
as_jar(JDBC_DRIVER)
assign(JDBC_DRIVER_JAR,~~)

as_jar(websocket_api)
assign(websocket jar,~~)
as_jar(servlet_api)
assign(servlet jar,~~)
display("jars: ${servlet jar}, ${JDBC_DRIVER_JAR} and others ...")

target clean {
    dependency {true}
    files(${build_directory}/${build_file}, ${build_directory}/${war_file}, ${build_directory}/${domain}/*.class/)
    for file:~~ {
    	rm (file)
    }
}

target dep_dir {
  dependency {
     eq {
        timestamp(.temp_repo)
     }
   }
   display(Dir .temp_repo)
   mkd (
        .temp_repo
   )
}

target get_ext_deps {
  dependency{target(dep_dir)}
  dependency {
    or{
         eq {
            timestamp(.temp_repo${~/~}${websocket jar})
         }
        eq {
            timestamp(.temp_repo${~/~}${servlet jar})
        }
        eq {
            timestamp(.temp_repo${~/~}${JSON_API_LIB_JAR})
        }
        eq {
            timestamp(.temp_repo${~/~}${JDBC_DRIVER_JAR})
        }
   }
 }
 
     if {
           eq {
              timestamp(.temp_repo${~/~}${JSON_API_LIB_JAR})
           }
           then {
             display(Loading ${JSON_API_LIB_JAR})
             as_url(JSON_API_LIB)
             exec wget (
               ~~, 
               -O,
               .temp_repo${~/~}${JSON_API_LIB_JAR}
             )
          }
       }
       
      if {
           eq {
              timestamp(.temp_repo${~/~}${JDBC_DRIVER_JAR})
           }
           then {
             display(Loading ${JDBC_DRIVER_JAR})
             as_url(JDBC_DRIVER)
             exec wget (
               ~~, 
               -O,
               .temp_repo${~/~}${JDBC_DRIVER_JAR}
             )
          }
       }
     
     
      if {
       eq {
          timestamp(.temp_repo${~/~}${websocket jar})
       }
       then {
         display(Loading ${websocket jar})
         
         as_url(websocket_api)
         exec wget (
           ~~, 
           -O,
           .temp_repo${~/~}${websocket jar}
         )
      }
   }

    if {
       eq {
          timestamp(.temp_repo${~/~}${servlet jar})
       }
       then {
         as_url(servlet_api)
         exec wget (
           ~~, 
           -O,
           .temp_repo${~/~}${servlet jar}
         )
      }
   }
}

target compile:. {
   dependency {
       or {
              newerthan(${source_directory}${~/~}.java,${build_directory}${~/~}.class)
       }
   }
   dependency {
          target(get_ext_deps)
   }
   newerthan(${source_directory}${~/~}.java,${build_directory}${~/~}.class)
   assign(main src,~~)
   if {
       or (main src) then {
       display(Compiling Java src ${cp}... )
           exec javac (
             -d,
             ${build_directory},
            -classpath,
             cp,
             main src
           )     
        	 if {
        	     neq(${~~}, 0)
        	     then {
        	        panic("Compilation error(s)")
        	     }
        	 }
    	}
	}
}

target jar {
      dependency {
         anynewer(${build_directory}/${domain}/*,${build_directory}/${build_file})
      }
      dependency {
          target(compile)
      }
     
      display(Jarring ${build_file} ...)
      keys=[-cf]
      if {
      	neq(manifest file,)
      	then {
      		array(-cfm, manifest file)
      		assign(keys, ~~)
      	}
      }
      exec jar (
        keys,
        ${build_directory}/${build_file},
        -C,
        ${build_directory},
        ${domain}
      )
}

target deploy {
	dependency {
          target(war)
   }
   dependency {
      or {
       anynewer(${build_directory}${~/~}${war_file},${TJWS_HOME}/1.x/webapps/${war_file})
       }
    }
    display(Deploying ${build_directory}/${war_file} ...)
    cp(${build_directory}/${war_file},${TJWS_HOME}/1.x/webapps)
}

target war {
	dependency {
          target(jar)
   }
   dependency {
      or {
       anynewer(src/view/*,${build_directory}/${war_file})
       anynewer(src/html/*,${build_directory}/${war_file})
       anynewer(src/cfg/*,${build_directory}/${war_file})
       anynewer(src/js/*,${build_directory}/${war_file})
       anynewer(${webbee_home}${~/~}src${~/~}*,${build_directory}/${war_file})
       anynewer(bee.7b,${build_directory}/${war_file})
     }
   }
   display(Preparing ${war_file} on ${~os~})
   zip(${build_directory}${~/~}${war_file},
   -B WEB-INF,src${~/~}res${~/~}cfg${~/~}web.xml,
   -C WEB-INF/classes/${domain},${build_directory}${~/~}${domain},
   -B WEB-INF/lib,${aldan3_home}${~/~}build${~/~}aldan3.jar,
   -B WEB-INF/lib,${aldan3_home}-jdo${~/~}build${~/~}aldan3-jdo.jar,
   -B WEB-INF/lib,${webbee},
   # custom libs
   -B WEB-INF/lib,${buzzbee},
   -B WEB-INF/lib,.temp_repo${~/~}${JSON_API_LIB_JAR},
   -B WEB-INF/lib,.temp_repo${~/~}${JDBC_DRIVER_JAR},
   
   -B WEB-INF/config,src${~/~}res${~/~}cfg${~/~}*.properties, 
   -B META-INF, src${~/~}res${~/~}cfg${~/~}context.xml,
   -C WEB-INF/res/view,src${~/~}res${~/~}view${~/~}*.html,
   -C WEB-INF/res/view,src${~/~}res${~/~}view${~/~}*.txt,
   -C WEB-INF/res/view,src${~/~}res${~/~}view${~/~}*.htm,
   -C WEB-INF/res/view,src${~/~}res${~/~}view${~/~}*.htmt,
   -C WEB-INF/res/view,src${~/~}res${~/~}view${~/~}*.json,
   
   -C WEB-INF/res/text,src${~/~}res${~/~}text${~/~}*.properties,
   -B, src${~/~}res${~/~}html${~/~}*.jsp,
   -B, src${~/~}res${~/~}html${~/~}*.html,
   -B image,src${~/~}3rd_party${~/~}image${~/~}*.gif,
   -B image,src${~/~}res${~/~}image${~/~}*.png,
   -B image,src${~/~}res${~/~}image${~/~}*.jpg,
   -B,src${~/~}res${~/~}image${~/~}favicon.ico,
   -B js,src${~/~}js${~/~}*.js,
   -B css,src${~/~}res${~/~}css${~/~}*.css,
   -B,src${~/~}res${~/~}html${~/~}*.html,
   -B,src${~/~}res${~/~}html${~/~}*.jsp,
   -B,src${~/~}res${~/~}html${~/~}*.json,
   -B js,src/3rd_party/js/*.js,
   -B sound,src${~/~}res${~/~}sound${~/~}*.ogg,
   -B js,src${~/~}3rd_party${~/~}ace${~/~}*.js,
   # merging webbee
   -B WEB-INF/res/text,${webbee_home}${~/~}src${~/~}res${~/~}text${~/~}*.properties,
   -C WEB-INF/res/view,${webbee_home}${~/~}src${~/~}res${~/~}template${~/~}*.htmt,
   -B js,${webbee_home}${~/~}src${~/~}js${~/~}*.js,
   -B css,${webbee_home}${~/~}src${~/~}res${~/~}css${~/~}*.css,
   -B image,${webbee_home}${~/~}src${~/~}res${~/~}image${~/~}*.gif
   )
   display(${~~} built)
}




